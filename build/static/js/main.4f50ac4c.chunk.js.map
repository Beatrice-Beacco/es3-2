{"version":3,"sources":["services/numbers.js","components/Numbers.js","components/FoundResults.js","components/Field.js","components/Message.js","App.js","index.js"],"names":["baseUrl","getAll","axios","get","then","response","data","newObject","post","id","put","delete","Numbers","list","handler","map","entry","name","number","onClick","e","FoundResults","results","Field","text","updateFunction","stateHandler","onChange","Message","state","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchResults","setSearchResults","notification","setNotification","useEffect","numberService","initialDb","addNew","event","handleState","preventDefault","document","getElementById","value","updateMessage","message","setTimeout","searched","filter","element","search","onSubmit","personSearch","find","window","alert","confirm","updatedEntry","updatedList","newId","reduce","biggest","Math","max","addedNumber","type","catch","ReactDOM","render"],"mappings":"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","file":"static/js/main.4f50ac4c.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'api/persons' //'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(baseUrl + '/' + id, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Deletes the number and returns the updated database\r\nconst deleteNumber = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    const updates = request.then(getAll)\r\n    return updates\r\n}\r\n\r\nexport default {getAll, create, update, deleteNumber}\r\n","import React from 'react'\r\n\r\n//Maps all the elements in the numbers array and puts them in a list\r\nconst Numbers = ({list, handler}) => {\r\n    return (\r\n        <div>\r\n            {list.map((entry) => {\r\n                return (\r\n                    <li key={entry.id}>\r\n                        {entry.name} - Number: {entry.number} <button onClick={(e)=>handler(e, entry.id, entry.name)}>Delete</button>\r\n                    </li>)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Numbers","import React from 'react'\r\n\r\n//Maps the array with the search results and puts them in a line\r\nconst FoundResults = ({ results }) => {\r\n    return (\r\n        <>\r\n            {results.map((entry) => {\r\n                return ' --- ' + entry['name'] + ': ' + entry['number']\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FoundResults","import React from 'react'\r\n\r\n//Creates an input field with an event handler with a passed function and the passed state handler\r\n//function and id as arguments \r\nconst Field = ({ text, id, updateFunction, stateHandler }) => {\r\n    return (\r\n        <div>\r\n            {text}: <input id={id} onChange={(e) => updateFunction(e, stateHandler, id)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Field","import React from 'react'\r\n\r\n//Displays the renders the state with the CSS style if it's not empty\r\n//The element at the index 0 of the state is the message, at index 1 is the color\r\nconst Message = ({state}) =>{\r\n    const notificationStyle = {\r\n        color: state[1],\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    if(state){\r\n        return(\r\n            <div style={notificationStyle}>\r\n            <em>{state[0]}</em>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Message","import React, { useEffect, useState } from 'react'\r\n\r\n//Import my module\r\nimport numberService from './services/numbers.js'\r\n\r\n//Import my components\r\nimport Numbers from './components/Numbers'\r\nimport FoundResults from './components/FoundResults'\r\nimport Field from './components/Field'\r\nimport Message from './components/Message'\r\n\r\nconst App = () => {\r\n\r\n//States\r\nconst [persons, setPersons] = useState([]) //list of total entries\r\nconst [newName, setNewName] = useState('') //name input field\r\nconst [newNumber, setNewNumber] = useState('') //number input field\r\nconst [searchResults, setSearchResults] = useState([]) //search input field\r\nconst [notification, setNotification] = useState('') //notification to display if something is added/there's an error\r\n\r\n//Fetches the data from db.json as sets it as the persons state\r\nconst hook = () => {\r\n  numberService.getAll().then((initialDb) => setPersons(initialDb))\r\n}\r\n\r\nuseEffect(hook,[])\r\n\r\n//Receives the event to use preventDefault, the function to change the desired state\r\n//and the ID of the field to get the user imput\r\n//Returns the action of setting the content of the user input to the respective state\r\n//of the state handler function\r\nconst addNew = (event, handleState, id) => {\r\n  event.preventDefault()\r\n  let content = document.getElementById(id).value\r\n  return handleState(content)\r\n}\r\n\r\n//Receives the event object (to prevent the reload of the page) and the id of the entry to delete\r\n//Makes a request to delete the entry, then makes a request to receive the updated list from the database\r\n//And sets it as the persons state\r\nconst deleteEntry = (event, id, name) =>{\r\n  event.preventDefault()\r\n  numberService.deleteNumber(id)\r\n  .then(()=>{\r\n    numberService.getAll()\r\n    .then((list)=> setPersons(list))\r\n  })\r\n  .catch(()=>updateMessage([name + ' was already deleted from the server', 'red'])) //If there's an error that means that the number is not present and updates the notification accordingly\r\n}\r\n\r\n//Takes the message array as an argument\r\n//Sets the notification state with the passed argument\r\n//Returns a timeout that sets the notification with an empty message after 5 seconds\r\nconst updateMessage = (message) => {\r\n  setNotification(message)\r\n  return (setTimeout(() => {\r\n    setNotification('')\r\n  }, 5000))\r\n}\r\n\r\n//Searches the array with find to see if the user input set in newName aldready exists\r\n//in the array\r\n//If a result is returned, returns a popup to alert the user\r\n//If undefined is returned: \r\n//If both user inputs are set, both are added to the json database through the HTTP POST method\r\n//method and set to the state through the state handler function\r\n//If one or both inputs are not set, returns a popup to alert the user and updates the number in the database\r\nconst updateList = (event) => {\r\n  event.preventDefault();\r\n\r\n  const personSearch = persons.find((element) => (element['name'] === newName))\r\n\r\n    if(newName && newNumber){ //If both parameters are set\r\n      if (personSearch) { //And if the name is already present, opens a prompt to confirm user input, then sends a put request to the server\r\n        const userInput = window.confirm('The name ' + newName + ' is already present! Do you want to replace the number?')\r\n        if (userInput){\r\n          const updatedEntry = {...personSearch, number: newNumber}\r\n          numberService.update(personSearch.id, updatedEntry)\r\n          .then(() => numberService.getAll()) //Fetches the updated data\r\n          .then((updatedList) => setPersons(updatedList)) //And updates the persons state\r\n          .then(updateMessage(['Updated ' + newName, 'green'])) ////calls the function updateMessage and passes the update notification\r\n        }\r\n      } else {\r\n      const newId = persons.reduce((biggest, element)=>{ //Calculates the largest id so we can set the biggest number +1 to avoid duplicates\r\n        return(Math.max(biggest, element.id))}, 0)\r\n      const newEntry = { 'name': newName, 'number': newNumber, 'id': newId+1}\r\n      numberService.create(newEntry) //creates the new entry\r\n      .then(addedNumber => setPersons([...persons, addedNumber])) //and updates the state with the database\r\n      .then(updateMessage(['Added '+ newName, 'green'])) //calls the function updateMessage and passes the add notification\r\n      }\r\n    } else { //If both fields arenot set alerts the user\r\n      return (window.alert('Please, complete both fields!'))\r\n    }\r\n}\r\n\r\n//Gets the user imput from the search field, and filters the persons array. If at least\r\n//a match is found in each element through the search method, returns true.\r\n//At the end sets the searchResults state with the filtered array.\r\nconst searchList = () => {\r\n  let searched = document.getElementById(\"search\").value\r\n  let results = persons.filter((element)=>{\r\n   return (element['name'].search(searched) > -1) ? true : false //(i know this notation is useless but I wanted to use it atleast once in my life lmao)\r\n  })\r\n  return setSearchResults(results)\r\n}\r\n\r\n//Renders all components and fields\r\n  return (\r\n    <div>\r\n      <center><h1>Phonebook</h1></center>\r\n      <Message state={notification}/>\r\n      <h2>Search</h2>\r\n      <input id=\"search\" onChange={searchList}/><br/>\r\n      Results: {<FoundResults results={searchResults}/>}\r\n      <h2>Add New</h2>\r\n      <form onSubmit={updateList}>\r\n        <Field text=\"Name\" id=\"name\" updateFunction={addNew} stateHandler={setNewName}/>\r\n        <Field text=\"Number\" id=\"number\" updateFunction={addNew} stateHandler={setNewNumber}/>\r\n        <div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n      <h2>Numbers</h2>\r\n      <Numbers list={persons} handler={deleteEntry}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}